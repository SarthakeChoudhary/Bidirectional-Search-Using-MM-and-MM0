def MM0(problem):
    
    
    def PathReverse(p):
        """
        Given a action list, return the reversed version of it.
        """
        path=[]
        for x in p:
            if x == 'NORTH':
                z= 'SOUTH'
                path.append(z)
            if x== 'SOUTH':
                z= 'NORTH'
                path.append(z)
            if x== 'WEST':
                z='EAST'
                path.append(z)
            if x== 'EAST':
                z='WEST'
                path.append(z) 
        return path[::-1]
    
    gF=0
    gB=0
    OpenF=util.PriorityQueue()
    OpenB=util.PriorityQueue()
    
    OpenF.push((problem.getStartState(),[],0),gF)
    OpenB.push((problem.getGoalState(),[],0),gB)
    
    ClosedF=[]
    ClosedB=[]
    
    
    while (not OpenF.isEmpty()) and (not OpenB.isEmpty()):
        
        CurrentPopF=OpenF.pop()
        CurrentPopB=OpenB.pop()
        StateF=CurrentPopF[0]
        StateB=CurrentPopB[0]
        gF=CurrentPopF[2]
        gB=CurrentPopB[2]
        pathF=CurrentPopF[1]
        pathB=CurrentPopB[1]

        

        C=min(gF,gB)
        
        if (C == gF):
            if StateF not in ClosedF:
                ClosedF.append(StateF)

                if problem.isGoalState(StateF) and (StateF in ClosedB):
                    path=pathF+PathReverse(pathB)
                    return path
                else:
                    SuccessorsF=problem.getSuccessors(StateF)
                    for x in SuccessorsF:
                        OpenF.push((x[0], pathF+[x[1]], gF+x[2]),gF+x[2])
                        pathF += [x[1]]

                    
        else:
            if StateB not in ClosedB:
                ClosedB.append(StateB)

                if  StateB in ClosedF:
                    path=pathF+PathReverse(pathB)
                    return path
                else: 
                    SuccessorsB=problem.getSuccessors(StateB)
                    for x in SuccessorsB:
                        OpenB.push((x[0], pathB+[x[1]], gB+x[2]),gB+x[2])
                        pathB += [x[1]]

        return []
